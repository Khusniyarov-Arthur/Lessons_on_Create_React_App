import style from './Post.module.css';
import PropTypes from 'prop-types';
import {PostDate} from './PostDate/PostDate';
import {PostRating} from './PostRating/PostRating';
import {PostContent} from './PostContent/PostContent';
import {PostPhoto} from './PostPhoto/PostPhoto';
import {PostDelete} from './PostDelete/PostDelete';


export const Post = ({postData}) => {
  const {ups, title, author, date} = postData;
  return (
    <li className={style.post}>
      <PostPhoto titelPhoto={title} />
      {/* 1. Что вы делаете на этом шаге? - Элементы данного списка <li> разбиваю на компоненты и импортирую в компонент Post, созданный компонент PostPhoto, каждый компонент получает собственный пропс из postData
          2. Зачем / для чего? - Теперь компонент Post содержит компонент, который выполняет определенную функцию, PostPhoto выводит картинку в пост
          3. Какой результат вам это дает? - Позволяет легко читать код, дает возможность повторного применения данного компонента если это необходимо еще где то */}
      <PostContent content={[title, author]} />
      {/* 1. Что вы делаете на этом шаге? - Элементы данного списка <li> разбиваю на компоненты и импортирую в компонент Post, созданный компонент PostContent, каждый компонент получает собственный пропс из postData
          2. Зачем / для чего? - Теперь компонент Post содержит компонент, который выполняет определенную функцию, PostContent отвечает за вывод заголовка и автора поста
          3. Какой результат вам это дает? - Позволяет легко читать код, дает возможность повторного применения данного компонента если это необходимо еще где то */}
      <PostRating ups={ups} />
      {/* 1. Что вы делаете на этом шаге? - Элементы данного списка <li> разбиваю на компоненты и импортирую в компонент Post, созданный компонент PostRating, каждый компонент получает собственный пропс из postData
          2. Зачем / для чего? - Теперь компонент Post содержит компонент, который выполняет определенную функцию, PostRating отвечает за вывод рейтинга со всем присущими ему функционалом
          3. Какой результат вам это дает? - Позволяет легко читать код, дает возможность повторного применения данного компонента если это необходимо еще где то */}
      <PostDate date={date} />
      {/* 1. Что вы делаете на этом шаге? - Элементы данного списка <li> разбиваю на компоненты и импортирую в компонент Post, созданный компонент PostDate, каждый компонент получает собственный пропс из postData
          2. Зачем / для чего? - Теперь компонент Post содержит компонент, который выполняет определенную функцию, PostDate отвечает за вывод даты в посте
          3. Какой результат вам это дает? - Позволяет легко читать код, дает возможность повторного применения данного компонента если это необходимо еще где то */}
      <PostDelete />
      {/* 1. Что вы делаете на этом шаге? - Элементы данного списка <li> разбиваю на компоненты и импортирую в компонент Post, созданный компонент PostDelete, каждый компонент получает собственный пропс из postData
          2. Зачем / для чего? - Теперь компонент Post содержит компонент, который выполняет определенную функцию, PostDelete отвечает за функцию удаления поста
          3. Какой результат вам это дает? - Позволяет легко читать код, дает возможность повторного применения данного компонента если это необходимо еще где то */}
      {/* Не совсем понятно это задание с описанием, поэтому описал каждую строчку компонента  PostContent. Остальные описывать не стал, суть одна и та же, меняются где-то типы данных пропса, где-то есть картинки */}
    </li>
  );
};

Post.propTypes = {
  postData: PropTypes.object,
};
